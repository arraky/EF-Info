"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>p});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=c(n),p=o,y=f["".concat(d,".").concat(p)]||f[p]||s[p]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i="Recursion",l={permalink:"/EF-Info/2022/12/6/numtrip-update",editUrl:"https://github.com/arraky/EF-Info/tree/main/blog/2022-12-6-numtrip-update.md",source:"@site/blog/2022-12-6-numtrip-update.md",title:"Recursion",description:"This is the theme of this blog entry",date:"2022-12-06T00:00:00.000Z",formattedDate:"6. Dezember 2022",tags:[],readingTime:2.15,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"Working game?",permalink:"/EF-Info/2022/12/31/numtrip-update"},nextItem:{title:"My reentry into Python",permalink:"/EF-Info/2022/08/26/python-reentry"}},d={authorsImageUrls:[]},c=[{value:"New Functions",id:"new-functions",level:2},{value:"Checkdel_and_double()",id:"checkdel_and_double",level:3},{value:"Replacetop()",id:"replacetop",level:3},{value:"Endgame()",id:"endgame",level:3},{value:"Is_integer(n):",id:"is_integern",level:3},{value:"Changes to checkadj(x,y)",id:"changes-to-checkadjxy",level:2},{value:"Added a not_left, not_right etc.",id:"added-a-not_left-not_right-etc",level:3},{value:"Added an if and elif statement",id:"added-an-if-and-elif-statement",level:3},{value:"Started to try recursion",id:"started-to-try-recursion",level:3}],u={toc:c};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This is the theme of this blog entry"),(0,o.kt)("h2",{id:"new-functions"},"New Functions"),(0,o.kt)("h3",{id:"checkdel_and_double"},"Checkdel_and_double()"),(0,o.kt)("p",null,"A small function to check if you should double the content of field","[y][x]",":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def checkdel_and_double():\n    if checkadj(x,y) is True:\n        field[y][x] = 2*oldfield\n        return True\n")),(0,o.kt)("h3",{id:"replacetop"},"Replacetop()"),(0,o.kt)("p",null,"If the top field is emptied, it can't take numbers from above as their are no rows above it (obviously). Thus created a function (haven't implemented it yet) that creates new numbers similar to the random numbers filling up field[] at the beginning of the code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def replacetop():\n    if field[0][x] == 0:\n        field[0][x] == 2**(randint(0,6))\n")),(0,o.kt)("h3",{id:"endgame"},"Endgame()"),(0,o.kt)("p",null,"Again a function that I haven't implemented yet. It's supposed to constantly check the whole field for a possible field to be marked."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def endgame():\n    for x in range(4):\n        for y in range(4):\n            if field[y][x] != field[y+1][x] or y!=4 and y!=0 or field[y-1][x] and field[y][x+1] or x!=4 and field[y][x-1] or x!=0:\n                return True\n")),(0,o.kt)("h3",{id:"is_integern"},"Is_integer(n):"),(0,o.kt)("p",null,"Copied that from the internet. It checks if the input is a float or an integer. Needed it for X- and Y-Inputcheck, because otherwise the program crashed with inputs like '0.1'"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"def is_integer(n):\n    try:\n        float(n)\n    except ValueError:\n        return False\n    else:\n        return float(n).is_integer()\n")),(0,o.kt)("h2",{id:"changes-to-checkadjxy"},"Changes to checkadj(x,y)"),(0,o.kt)("p",null,'Added parameters in paranthesis to account for error "referenced before assignment"'),(0,o.kt)("h3",{id:"added-a-not_left-not_right-etc"},"Added a not_left, not_right etc."),(0,o.kt)("p",null,'statement with or False at the end so I could all put it into the statement "noadj"'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"not_left = (x > 0 and field[y][x] != field[y][x - 1]) or False\nnot_right = (x < 4 and field[y][x] != field[y][x + 1]) or False\nnot_up = (y > 0 and field[y][x] != field[y - 1][x]) or False\nnot_down = (y < 4 and field[y][x] != field[y + 1][x]) or False\nnoadj = not_left and not_right and not_up and not_down\n")),(0,o.kt)("h3",{id:"added-an-if-and-elif-statement"},"Added an if and elif statement"),(0,o.kt)("p",null,"After you check the surroundings of field","[y][x]",", say ","[y][x+1]"," and ","[y][x-1]"," have the same number in them. My code then empties ","[y][x]"," to allow for recursion (otherwise infinite loop between ","[y][x]"," and ","[y][x+1]",") and goes to ","[y][x+1]"," to check this field's surroundings (Recursion). If it doesn't find anything new, it should return to the original y and x values to check at ","[y][x-1]",". Thus I added this in my play loop: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"oldx = x\noldy = y\noldfield = field[y][x]\n")),(0,o.kt)("p",null,"and this in checkadj(x,y):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"if noadj and (y!=oldy or x!=oldx):\n    field[y][x] = 0\n    y=oldy\n    x=oldx\n\nelif noadj:\n    return False\n")),(0,o.kt)("h3",{id:"started-to-try-recursion"},"Started to try recursion"),(0,o.kt)("p",null,"I have four modules, one for each direction. The ","[y+1][x]"," module looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"if y!=4 and field[y+1][x] == field[y][x]:\n    field[y][x] = 0\n    y+=1\n    checkadj(x,y)\n    return True\n")))}s.isMDXComponent=!0}}]);