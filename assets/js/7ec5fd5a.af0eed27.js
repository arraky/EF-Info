"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[547],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>c});var i=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,l=function(e,n){if(null==e)return{};var t,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=i.createContext({}),p=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return i.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),f=p(t),c=l,y=f["".concat(d,".").concat(c)]||f[c]||u[c]||a;return t?i.createElement(y,r(r({ref:n},s),{},{components:t})):i.createElement(y,r({ref:n},s))}));function c(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,r=new Array(a);r[0]=f;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var p=2;p<a;p++)r[p]=t[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7111:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=t(7462),l=(t(7294),t(3905));const a={},r=void 0,o={permalink:"/EF-Info/2023/1/23/numtrip-topdown",editUrl:"https://github.com/arraky/EF-Info/tree/main/blog/2023-1-23-numtrip-topdown.md",source:"@site/blog/2023-1-23-numtrip-topdown.md",title:"numtrip-topdown",description:"1",date:"2023-01-23T00:00:00.000Z",formattedDate:"23. Januar 2023",tags:[],readingTime:4.07,hasTruncateMarker:!1,authors:[],frontMatter:{},nextItem:{title:"What was it all for?",permalink:"/EF-Info/2023/1/13/numtrip-conclusion"}},d={authorsImageUrls:[]},p=[{value:"1",id:"1",level:2},{value:"2",id:"2",level:2},{value:"3",id:"3",level:2},{value:"4",id:"4",level:2},{value:"5",id:"5",level:2},{value:"6",id:"6",level:2},{value:"7",id:"7",level:2},{value:"8",id:"8",level:2},{value:"9",id:"9",level:2},{value:"10",id:"10",level:2},{value:"11",id:"11",level:2},{value:"12",id:"12",level:2},{value:"13",id:"13",level:2}],s={toc:p};function u(e){let{components:n,...a}=e;return(0,l.kt)("wrapper",(0,i.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("img",{src:t(1912).Z,width:"1641",height:"541"})),(0,l.kt)("h1",{id:"functions"},"Functions"),(0,l.kt)("h2",{id:"1"},"1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"for m in range(Row):\n     field.append([])\n     for n in range(Coloumns):\n         Num = 2**(randint(0,3))\n         field[m].append(Num)\n")),(0,l.kt)("h2",{id:"2"},"2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def fieldnum():\n    print('  ',end='')\n    for i in range(Row):\n        print('   ',i, end='  ')\n    print('')\n\ndef line():\n    print('  ', end='')\n    for i in range(Row):\n        print('+------',end='')\n    print('+')\n\ndef playground():\n    fieldnum()\n    for i in range(Row):\n        line()\n        print(i,end=' ')\n        for j in range(Coloumns):\n            if 100>field[i][j] >10:\n                print(f'| ',field[i][j], end='  ')\n            elif 1000>field[i][j] >100:\n                print(f'| ',field[i][j], end=' ')\n            else:\n                print(f'|  ',field[i][j], end='  ')\n            \n        print('|')\n    line()\n")),(0,l.kt)("h2",{id:"3"},"3"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def replacetop():\n    pass\n    #function at header 11\n")),(0,l.kt)("h2",{id:"4"},"4"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"adjlist = []\ndef checkadj(x,y,oldy,oldx):\n    pass\n    #function at header 10\n\ndef checkdel_and_double():\n    if checkadj(x,y,oldy,oldx) is True:\n        field[oldy][oldx] = 2*oldfield #doubles the value of our original field if checkadj() is True\n")),(0,l.kt)("h2",{id:"5"},"5"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"while endgameloss() is False:\n    if roundcount == 0: #show it the first time\n        playground()\n    else:\n        pass\n\n    x = X_Inputcheck('X Axis:') #Inputs\n    y = Y_Inputcheck('Y Axis:')\n\n    oldy,oldx = y,x #Stores values for later\n    oldfield = field[y][x]\n\n    print(f'You chose the field with the number:', field[y][x]) #Inform the player that the right field was chosen\n\n    checkdel_and_double() #Recursion delete\n    replacetop() #Fill up\n\n    adjlist.clear() #Clear list, so it doesn't annoy us in the next round\n    if endgamewin() is True: #Check if win condition is met; if so -> Congratulations\n        playground()\n        print(f'You won! It took you {roundcount} rounds')\n        break\n    roundcount+=1 #counts the rounds\n    print('New Field:')\n    playground() #show the end result so that you can play again\n")),(0,l.kt)("h2",{id:"6"},"6"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def endgameloss():\n    global field\n    endgameplayfield = [x[:] for x in field] #copies the whole field into endgameplayfield as a backup copy\n    for i in range(5):\n        for j in range(5):\n            if checkadj(j,i, oldx=j, oldy=i) is True:\n                field = [x[:] for x in endgameplayfield] #copy every element back\n                adjlist.clear() #clear list so it doesn't affect the actual game\n                return False #Continue Game\n    playground()\n    print(f'Alas, you lost! You lasted {roundcount} rounds')\n    return True #Loss\n\ndef endgamewin():\n    for i in range(5):\n        for j in range(5):\n            if field[i][j] == 256: #if any field has the value 256, it's a win\n                return True#Win\n")),(0,l.kt)("h2",{id:"7"},"7"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def X_Inputcheck(Questionx):\n    inpx = \"\".join(filter(lambda x: x in ['0','1','2','3','4','-'],input(Questionx))) \n    #Lambda defines a function here: Filter out everything that's not in '0123456789-'\n    while len(inpx)!=1: #len(inpx) must be 1. if not, inputs like '01' or '012' would be allowed\n        print('input not valid')\n        inpx = \"\".join(filter(lambda x: x in ['0','1','2','3','4','-'],input(Questionx)))\n    numx=int(inpx)\n    return numx\n\ndef Y_Inputcheck(Questiony):\n    inpy = \"\".join(filter(lambda x: x in ['0','1','2','3','4','-'],input(Questiony)))\n    while len(inpy)!=1:\n        print('input not valid')\n        inpy = \"\".join(filter(lambda x: x in ['0','1','2','3','4','-'],input(Questiony)))\n    numy=int(inpy)\n    return numy\n")),(0,l.kt)("h2",{id:"8"},"8"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def playground():\n    field[i][j] #this part in the playground function\n")),(0,l.kt)("h2",{id:"9"},"9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"#This part in the gameloop:\n    x = X_Inputcheck('X Axis:') #Inputs\n    y = Y_Inputcheck('Y Axis:')\n\n    oldy,oldx = y,x #Stores values for later\n    oldfield = field[y][x]\n")),(0,l.kt)("h2",{id:"10"},"10"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def checkadj(x,y,oldy,oldx):\n    left = (x > 0 and field[y][x] == field[y][x - 1] and field[y][x]!=0) or False #expressions to make life easier\n    right = (x < 4 and field[y][x] == field[y][x + 1] and field[y][x]!=0) or False # if x isn't bigger than 4 -> no out of bounds error\n    up = (y > 0 and field[y][x] == field[y - 1][x] and field[y][x]!=0) or False #looks if field upwards is same as our current field\n    down = (y < 4 and field[y][x] == field[y + 1][x] and field[y][x]!=0) or False #current field != 0, otherwise, in some cases there's going to be infinite loops (we don't like those)\n    anyadj = left or right or up or down\n\n    \n    if not anyadj and (y!=oldy or x!=oldx): #if you advance into some field, and around this field nothing is same, it should return to original field\n        field[y][x] = 0\n        y,x = oldy,oldx\n        \n    elif not anyadj: #stop if there's nothing in the first place\n        return False\n\n    else:\n        if down:\n            adjlist.append([y+1,x]) #append element to adjlist\n            field[y][x] = 0 #set current field to 0 -> no infinite loops\n            checkadj(x,y+1,oldy,oldx) #repeat whole function at the element we added to adjlist\n        if left:\n            adjlist.append([y,x-1])\n            field[y][x] = 0\n            checkadj(x-1,y,oldy,oldx)\n        if right:\n            adjlist.append([y,x+1])\n            field[y][x] = 0\n            checkadj(x+1,y,oldy,oldx)\n        if up:\n            adjlist.append([y-1,x])\n            field[y][x] = 0\n            checkadj(x,y-1,oldy,oldx)\n        return True\n")),(0,l.kt)("p",null,"Takes the values as parameters in the function bracket"),(0,l.kt)("h2",{id:"11"},"11"),(0,l.kt)("p",null,"Takes the emptied field and refills it using the adjlist from the recursion algorithm"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"def replacetop():\n    adjlist.sort() #sorts the list -> prevents errors\n    for i in range(len(adjlist)):\n        dy = adjlist[i][0] #easy life expressions\n        dx = adjlist[i][1]\n        while dy != 0:\n            field[dy][dx] = field[dy-1][dx]\n            field[dy-1][dx] = 0\n            dy-=1 #go up one field\n        field[0][dx] = 2**(randint(0,3)) #fill up the field at the top with a new number\n")),(0,l.kt)("h2",{id:"12"},"12"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"#this part in the gameloop\nif endgamewin() is True: #Check if win condition is met; if so -> Congratulations\n        playground()\n        print(f'You won! It took you {roundcount} rounds')\n        break\n")),(0,l.kt)("h2",{id:"13"},"13"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"#This part in the gameloop\nprint('New Field:')\nplayground() #show the end result so that you can play again\n")))}u.isMDXComponent=!0},1912:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/Top-Down-e1b9fee8f18a10d48fca9f83ff03f6f4.svg"}}]);