"use strict";(self.webpackChunkef_website_template=self.webpackChunkef_website_template||[]).push([[934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,y=p["".concat(d,".").concat(f)]||p[f]||s[f]||o;return n?r.createElement(y,l(l({ref:t},u),{},{components:n})):r.createElement(y,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},150:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l="Recursion",i={permalink:"/EF-Info/2022/12/6/numtrip-update",editUrl:"https://github.com/arraky/EF-Info/tree/main/blog/2022-12-6-numtrip-update.md",source:"@site/blog/2022-12-6-numtrip-update.md",title:"Recursion",description:"This is the theme of this blog entry",date:"2022-12-06T00:00:00.000Z",formattedDate:"6. Dezember 2022",tags:[],readingTime:2.22,hasTruncateMarker:!1,authors:[],frontMatter:{},prevItem:{title:"Working game?",permalink:"/EF-Info/2022/12/31/numtrip-update"},nextItem:{title:"My reentry into Python",permalink:"/EF-Info/2022/08/26/python-reentry"}},d={authorsImageUrls:[]},c=[{value:"New Functions",id:"new-functions",level:2},{value:"Checkdel_and_double()",id:"checkdel_and_double",level:3},{value:"Replacetop()",id:"replacetop",level:3},{value:"Endgame()",id:"endgame",level:3},{value:"Is_integer(n):",id:"is_integern",level:3},{value:"Changes to checkadj(x,y)",id:"changes-to-checkadjxy",level:2},{value:"Added a not_left, not_right etc.",id:"added-a-not_left-not_right-etc",level:3},{value:"Added an if and elif statement",id:"added-an-if-and-elif-statement",level:3},{value:"Started to try recursion",id:"started-to-try-recursion",level:3}],u={toc:c};function s(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is the theme of this blog entry"),(0,a.kt)("h2",{id:"new-functions"},"New Functions"),(0,a.kt)("h3",{id:"checkdel_and_double"},"Checkdel_and_double()"),(0,a.kt)("p",null,"A small function to check if you should double the content of field","[y][x]",":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    def checkdel_and_double():\n        if checkadj(x,y) is True:\n            field[y][x] = 2*oldfield\n            return True\n")),(0,a.kt)("h3",{id:"replacetop"},"Replacetop()"),(0,a.kt)("p",null,"If the top field is emptied, it can't take numbers from above as their are no rows above it (obviously). Thus created a function (haven't implemented it yet) that creates new numbers similar to the random numbers filling up field[] at the beginning of the code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    def replacetop():\n        if field[0][x] == 0:\n            field[0][x] == 2**(randint(0,6))\n")),(0,a.kt)("h3",{id:"endgame"},"Endgame()"),(0,a.kt)("p",null,"Again a function that I haven't implemented yet. It's supposed to constantly check the whole field for a possible field to be marked."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    def endgame():\n        for x in range(4):\n            for y in range(4):\n                if field[y][x] != field[y+1][x] or y!=4 and y!=0 or field[y-1][x] and field[y][x+1] or x!=4 and field[y][x-1] or x!=0:\n                    return True\n")),(0,a.kt)("h3",{id:"is_integern"},"Is_integer(n):"),(0,a.kt)("p",null,"Copied that from the internet. It checks if the input is a float or an integer. Needed it for X- and Y-Inputcheck, because otherwise the program crashed with inputs like '0.1'"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    def is_integer(n):\n        try:\n            float(n)\n        except ValueError:\n            return False\n        else:\n            return float(n).is_integer()\n")),(0,a.kt)("h2",{id:"changes-to-checkadjxy"},"Changes to checkadj(x,y)"),(0,a.kt)("p",null,'Added parameters in paranthesis to account for error "referenced before assignment"'),(0,a.kt)("h3",{id:"added-a-not_left-not_right-etc"},"Added a not_left, not_right etc."),(0,a.kt)("p",null,'statement with or False at the end so I could all put it into the statement "noadj"'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    not_left = (x > 0 and field[y][x] != field[y][x - 1]) or False\n    not_right = (x < 4 and field[y][x] != field[y][x + 1]) or False\n    not_up = (y > 0 and field[y][x] != field[y - 1][x]) or False\n    not_down = (y < 4 and field[y][x] != field[y + 1][x]) or False\n    noadj = not_left and not_right and not_up and not_down\n")),(0,a.kt)("h3",{id:"added-an-if-and-elif-statement"},"Added an if and elif statement"),(0,a.kt)("p",null,"After you check the surroundings of field","[y][x]",", say ","[y][x+1]"," and ","[y][x-1]"," have the same number in them. My code then empties ","[y][x]"," to allow for recursion (otherwise infinite loop between ","[y][x]"," and ","[y][x+1]",") and goes to ","[y][x+1]"," to check this field's surroundings (Recursion). If it doesn't find anything new, it should return to the original y and x values to check at ","[y][x-1]",". Thus I added this in my play loop: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    oldx = x\n    oldy = y\n    oldfield = field[y][x]\n\nand this in checkadj(x,y):\n    \n    if noadj and (y!=oldy or x!=oldx):\n        field[y][x] = 0\n        y=oldy\n        x=oldx\n\n    elif noadj:\n        return False\n")),(0,a.kt)("h3",{id:"started-to-try-recursion"},"Started to try recursion"),(0,a.kt)("p",null,"I have four modules, one for each direction. The ","[y+1][x]"," module looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"    if y!=4 and field[y+1][x] == field[y][x]:\n        field[y][x] = 0\n        y+=1\n        checkadj(x,y)\n        return True\n")))}s.isMDXComponent=!0}}]);